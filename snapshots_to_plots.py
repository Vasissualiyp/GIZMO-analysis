#This code was written by Vasilii Pustovoit, CITA, 2023.02
#import libraries {{{
import os 
import numpy as np 
import yt 
import unyt
from PIL import Image
from scipy.optimize import curve_fit
from funcdef_snap_to_plot import *
from utils import *
from flags import get_flags_array
flags = get_flags_array()
import matplotlib.pyplot as plt #}}}

#--------------------------------START OF EDITABLE PART-------------------------------
# For flags, go to flags.py

# Choose what kind of a plot you want to create:
# Possibilities: density_profile; density; temperature
plottype='shock_velocity' 

# In/Out Directories
input_dir='../starform_23-03-03/snapshot2/'
out_dir='./shock_velocity/'

#Units
time_units='Myr'
boxsize_units='Mpc'
density_units='g/cm**3'
temperature_units='K'
velocity_units='km/s'
smooth_length_units='Mpc'

# For 2D plots (plottype = temperature, density)
axis_of_projection='y'

#color map limits
clrmin=2e-3
clrmax=1e-1

#For 2-plot mode, names of intermediate folders: 
#{{{
input_dir1  ='../starform_23-03-03/snapshot2/'
input_dir2  ='../starform_23-03-03/snapshot2/'
plottype1='density' #possibilities: density_profile; density
plottype2='smoothing_length_hist' #possibilities: density_profile; density
out_dir1    ='./density/'
out_dir2    ='./smoothing_length/'
#}}}

#---------------------------------END OF EDITABLE PART--------------------------------
def linear_func(x, k, b):
    return k * x + b

# Arrays {{{
x2 = [441.936295190528, 464.0331099500543, 487.23476544755715, 511.5965037199349, 537.1763289059315, 564.0351453512283, 592.2369026187898, 621.8487477497292, 652.9411851372156, 685.5882443940765, 719.8676566137801, 755.8610394444698, 793.6540914166936, 833.3367959875276, 875.0036357869035, 918.7538175762486, 964.6915084550612, 1012.9260838778154, 1063.5723880717062, 1116.7510074752906, 1172.5885578490554, 1231.2179857415085, 1292.778885028583, 1357.4178292800136, 1425.2887207440147, 1496.5531567812156, 1571.3808146202748, 1649.949855351289, 1732.4473481188552, 1819.0697155247983, 1910.023201301039, 2005.524361366089, 2105.800579434392, 2211.090608406112, 2321.64513882642, 2437.7273957677417, 2559.6137655561292, 2687.594453833933, 2821.97417652563, 2963.0728853519095, 3111.2265296195083, 3266.7878561004836, 3430.127248905509, 3601.6336113507823, 3781.7152919183222, 3970.801056514242, 4169.3411093399545, 4377.808164806949, 4596.698573047298, 4826.533501699659, 5067.860176784642, 5321.25318562388, 5587.315844905075, 5866.68163715033, 6160.015719007843, 6468.016504958234, 6791.417330206141, 7130.988196716455, 7487.53760655228, 7861.914486879894, 8255.010211223884, 8667.76072178508, 9101.148757874344, 9556.206195768063, 10034.016505556456, 10535.717330834283, 11062.503197375987, 11615.62835724479, 12196.409775107039, 12806.230263862397, 13446.541777055505, 13971.428571428576]
y2 = [[9.669289358098967, 9.342449152383208, 8.999286178180492, 8.639093968398305, 8.261072076677149, 7.8643302890050055, 7.447898937712399, 7.0107938625492245, 6.552048260940407, 6.07060811330422, 5.565409032924533, 5.035129595207829, 4.478803118622251, 3.895308389965715, 4.7331783503912375, 4.094100145430054, 4.7860265026240105, 4.0826904690255965, 3.346350374161429, 2.5860790701169107, 3.2698698705677165, 3.371759350462941, 3.659916033783908, 4.421467083822692, 4.0925756186209945, 4.38939216145417, 4.749533968557106, 4.730560967513058, 4.763919164366937, 5.374689316250313, 5.47215619197707, 5.400862711723237, 5.560786720526354, 6.202520362004236, 6.033207248274088, 6.195975187779277, 5.800886214160156, 6.530326139990789, 6.265991834419041, 6.2948882322593604, 6.08959385454681, 6.891515239644803, 7.180036205847388, 7.011947589481735, 7.368532387888429, 7.064926326992264, 6.878917173185768, 7.826395450336607, 6.822411163546079, 6.9076239830924475, 7.727685331566679, 7.415547748476228, 8.422838559417475, 8.180848181006835, 7.134838994955763, 7.883429660545251, 9.206077702436216, 9.02257243785757, 7.987603863499376, 8.610743852403402, 9.144989953482458, 8.151356296052501, 7.204227640639026, 9.37687824199089, 9.16701934066364, 8.021412442781692, 9.621368084273445, 8.647084754274887, 9.774785852988101, 8.82804484828567, 8.68080174823031, 8.002683652248118], [0.5721745102063456, 0.5446993993762963, 0.5154088213881172, 0.48362956643121074, 0.4479982637171275, 0.2726988884181345, 0.26863931434748267, 0.249903268882615, 0.21534378750794467, 0.11752651022920255, 0.012869547605892845, 0.16848745648130517, 0.44704193926795605, 0.9732336276796933, 0.7457285943398827, 0.6282564166478455, 0.9962132748568909, 0.9966137761258645, 1.0605979763973417, 1.156955447107502, 1.2626760575178066, 1.3330766157004994, 1.619228690103816, 2.0759573506970717, 2.298702810521825, 2.4534283184856496, 2.7669487067372276, 2.5879673159961976, 2.914165096165607, 2.840774269277438, 3.340506081515032, 3.2210293523413047, 3.664106569286135, 3.426848926173335, 3.8210690524495323, 3.76384593804341, 3.7860225688881854, 3.6597661950757567, 3.5605390882328254, 3.401368851522044, 4.182136672402704, 3.706809724841035, 4.3528481537811325, 4.384380828874423, 4.306278842748638, 4.096731463354541, 4.695172246218381, 4.2789760815353235, 4.998861460840772, 6.241831685345327, 4.583081599893122, 4.2705759575805, 3.8773207790236976, 5.707634217871285, 4.687923616239286, 4.787188511271521, 4.817723123333956, 4.879131023884772, 4.905131302159919, 4.797071609050817, 4.8839166015787905, 5.746970132805233, 5.313367091754253, 5.159578896122461, 4.712006239867092, 3.8027959077309816, 3.616825271590125, 5.740292041172858, 5.84475022070792, 6.78764533380763, 6.3776491456659015, 6.196209573982156]]

#}}}

# Array of units {{{
units = []
units.append(time_units)
units.append(boxsize_units)
units.append(density_units)
units.append(temperature_units)
units.append(velocity_units)
units.append(smooth_length_units)
#}}}

if 'double_plot' in flags:
    if 'InitialPlotting' in flags:
    #    x1,y1 = snap_to_plot(flags, input_dir1,out_dir1,plottype1, units)
        x2,y2 = snap_to_plot(flags, input_dir2,out_dir2,plottype2, units)
    combine_snapshots(out_dir, out_dir1, out_dir2)
    if 'Time_Dependent' in flags: #{{{
        plt.scatter(x2,y2[0], s = 3, label = 'Max gas velocity location')
        plt.scatter(x2,y2[1], s = 3, label = 'Max shock velocity location')
        #print(x2)
        #print(y2)
        plt.title('Shock max')
        plt.xlabel('time, ' + time_units ) 
        plt.ylabel('x, ' + boxsize_units)
        x = np.array(x2)
        y = np.array(y2[0])
        # find the index where x = 2000
        index_2000 = np.max(np.where(x < 2000))

        # fit the linear function to the data after x = 2000
        popt, pcov = curve_fit(linear_func, x[index_2000:], y[index_2000:])

        # the first parameter of popt is the slope k
        k = popt[0]*3.086e+19/3.154e+13

        print("The velocity of the shockwave is:", k, "km/s")
        plt.plot(x, linear_func(x, *popt), 'r-', label='fit')
        plt.legend()
        plt.savefig('shockmax.png')
    #}}}
else:
    x1,y1 = snap_to_plot(flags,input_dir,out_dir,plottype, units)
